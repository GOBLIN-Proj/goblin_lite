:py:mod:`goblin_lite.impact_categories`
=======================================

.. py:module:: goblin_lite.impact_categories

.. autoapi-nested-parse::

   =========================
   Impact Categories Module
   =========================

   The Impact Categories module is designed to calculate and analyze various environmental impacts in the context of land use change, livestock and crop production.
   This includes emissions related to climate change, eutrophication, and air quality. The module integrates data from various sources like cattle
   and sheep lifecycle assessments, crop production data, and land use changes, providing a comprehensive view of environmental impacts.

   Key Features
   ------------
   Integration with Multiple Data Sources: Utilizes data from cattle, sheep, crop lifecycle assessments, and land use changes.
   Environmental Impact Analysis: Calculates emissions contributing to climate change, eutrophication, and
   air quality.

   Flexible Data Handling: Works with different types of data inputs, including livestock and crop production data, land use transition data, and more.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_lite.impact_categories.CommonParams
   goblin_lite.impact_categories.ClimateChangeLandUse
   goblin_lite.impact_categories.ClimateChangeLivestock
   goblin_lite.impact_categories.EutrophicationLivestock
   goblin_lite.impact_categories.AirQualityLivestock
   goblin_lite.impact_categories.ClimateChangeCrop
   goblin_lite.impact_categories.EurtrophicationCrop
   goblin_lite.impact_categories.AirQualityCrop
   goblin_lite.impact_categories.ClimateChangeTotal
   goblin_lite.impact_categories.EutrophicationTotal
   goblin_lite.impact_categories.AirQualityTotal




.. py:class:: CommonParams



.. py:class:: ClimateChangeLandUse(calibration_year, target_year, transition_data, landuse_data, forest_data, ef_country, AR_VALUE='AR5')


   A class for calculating the impact of land use changes on climate change across various land types.

   .. attribute:: calibration_year

      The baseline year for calculations.

      :type: int

   .. attribute:: target_year

      The target year for future projections.

      :type: int

   .. attribute:: transition_data

      Data detailing land use transitions.

      :type: DataFrame

   .. attribute:: landuse_data

      Specific data related to land use.

      :type: DataFrame

   .. attribute:: forest_data

      Data related to forest areas.

      :type: DataFrame

   .. attribute:: ef_country

      emission factor country.

      :type: str

   .. attribute:: AR_VALUE

      The assessment report value (default 'AR5').

      :type: str

   .. method:: climate_change_landuse_past()

      Calculates past emissions for different land uses.

   .. method:: climate_change_landuse_future()

      Projects future emissions based on land use scenarios.

   .. method:: climate_change_landuse()

      Combines past and future data for a comprehensive view.
      
      

   .. py:method:: climate_change_landuse_past()

      Calculate past emissions for different land use types, considering various greenhouse gases.

      :returns: A dataframe with emissions data for different land use types and gases.
      :rtype: DataFrame


   .. py:method:: climate_change_landuse_future()

      Project future emissions based on various land use scenarios.

      :returns: A dataframe with projected emissions data for different land use types and gases.
      :rtype: DataFrame


   .. py:method:: climate_change_landuse()

      Combine past and future emissions data to provide a comprehensive view of land use impact on climate change.

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: ClimateChangeLivestock(ef_country, calibration_year, target_year, transition_data, landuse_data, crop_data, AR_VALUE='AR5')


   A class for assessing the impact of livestock on climate change. It calculates emissions
   from cattle and sheep for both past and future scenarios, considering various greenhouse gases.

   .. attribute:: ef_country

      emission factor country..

      :type: str

   .. attribute:: calibration_year

      The year used as a baseline for calculations.

      :type: int

   .. attribute:: target_year

      The target year for future scenario projections.

      :type: int

   .. attribute:: transition_data, landuse_data, crop_data

      DataFrames containing relevant data for calculations.

      :type: DataFrame

   .. attribute:: AR_VALUE

      The assessment report value, defaulting to 'AR5'.

      :type: str

   .. attribute:: cattle_climate_change_class, sheep_climate_change_class, crop_climate_change_class

      Classes for calculating emissions for each category.

   .. attribute:: goblin_data_manager_class

      A class for managing various data and constants.

      :type: GoblinDataManager

   .. method:: climate_change_livestock_past(baseline_animals, baseline_farms)

      
      Calculates past emissions based on baseline data for animals and farm inputs.

   .. method:: climate_change_livestock_future(scenario_animals, scenario_farms)

      
      Projects future emissions based on scenario data for animals and farm inputs.

   .. method:: climate_change_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      
      Provides detailed emissions data combining past and future scenarios.

   .. method:: climate_change_livestock_aggregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      
      Provides aggregated emissions data for easy interpretation and analysis.

   .. method:: climate_change_livestock_categories_as_co2e(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      
      Converts emissions data into CO2 equivalents for various categories.
      
      

   .. py:method:: climate_change_livestock_past(baseline_animals, baseline_farms)

      Calculate past livestock-related emissions for cattle and sheep, including various emission categories.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param baseline_farms: Data containing baseline farm information.
      :type baseline_farms: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: climate_change_livestock_future(scenario_animals, scenario_farms)

      Calculate scenario livestock-related emissions for cattle and sheep, including various emission categories.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param baseline_farms: Data containing baseline farm information.
      :type baseline_farms: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: climate_change_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      Combine past and future emissions data to provide a comprehensive view of livestock impact on climate change.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param scenario_animals: Data containing scenario animal information.
      :type scenario_animals: DataFrame
      :param baseline_farms: Data containing baseline farm input information.
      :type baseline_farms: DataFrame
      :param scenario_farms: Data containing scenario farm input information.
      :type scenario_farms: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame


   .. py:method:: climate_change_livestock_aggregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      Combine past and future emissions data to provide a comprehensive view of livestock impact on climate change
      for various GHG categories.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param scenario_animals: Data containing scenario animal information.
      :type scenario_animals: DataFrame
      :param baseline_farms: Data containing baseline farm input information.
      :type baseline_farms: DataFrame
      :param scenario_farms: Data containing scenario farm input information.
      :type scenario_farms: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame


   .. py:method:: climate_change_livestock_categories_as_co2e(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      Combine past and future emissions data to provide a comprehensive view of livestock impact on climate change
      for various GHG categories, converted to CO2 equivalents.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param scenario_animals: Data containing scenario animal information.
      :type scenario_animals: DataFrame
      :param baseline_farms: Data containing baseline farm input information.
      :type baseline_farms: DataFrame
      :param scenario_farms: Data containing scenario farm input information.
      :type scenario_farms: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: EutrophicationLivestock(ef_country)


   A class for assessing the impact of livestock on eutrophication. It calculates emissions
   from cattle and sheep for both past and future scenarios, considering various emission categories.

   .. attribute:: ef_country

      emission factor country..

      :type: str

   .. attribute:: cattle_eutrophication_class, sheep_eutrophication_class

      Classes for calculating emissions for each category.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. method:: eutrophication_livestock_past(baseline_animals, baseline_farms)

      
      Calculates past emissions based on baseline data for animals and farm inputs.

   .. method:: eutrophication_livestock_future(scenario_animals, scenario_farms)

      
      Projects future emissions based on scenario data for animals and farm inputs.

   .. method:: eutrophication_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      
      Provides detailed emissions data combining past and future scenarios.
      
      

   .. py:method:: eutrophication_livestock_past(baseline_animals, baseline_farms)

      Calculate past livestock-related emissions for cattle and sheep, including various emission categories.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param baseline_farms: Data containing baseline farm information.
      :type baseline_farms: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: eutrophication_livestock_future(scenario_animals, scenario_farms)

      Calculate scenario livestock-related emissions for cattle and sheep, including various emission categories.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param baseline_farms: Data containing baseline farm information.
      :type baseline_farms: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: eutrophication_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      Combine past and future emissions data to provide a comprehensive view of livestock impact on eutrophication.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param scenario_animals: Data containing scenario animal information.
      :type scenario_animals: DataFrame
      :param baseline_farms: Data containing baseline farm input information.
      :type baseline_farms: DataFrame
      :param scenario_farms: Data containing scenario farm input information.
      :type scenario_farms: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: AirQualityLivestock(ef_country)


   A class for assessing the impact of livestock on air quality. It calculates emissions
   from cattle and sheep for both past and future scenarios, considering various emission categories.

   .. attribute:: ef_country

      emission factor country.

      :type: str

   .. attribute:: cattle_air_quality_class, sheep_air_quality_class

      Classes for calculating emissions for each category.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. method:: air_quality_livestock_past(baseline_animals, baseline_farms)

      
      Calculates past emissions based on baseline data for animals and farm inputs.

   .. method:: air_quality_livestock_future(scenario_animals, scenario_farms)

      
      Projects future emissions based on scenario data for animals and farm inputs.

   .. method:: air_quality_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      
      Provides detailed emissions data combining past and future scenarios.
      
      

   .. py:method:: air_quality_livestock_past(baseline_animals, baseline_farms)

      Calculates past emissions based on baseline data for animals and farm inputs.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param baseline_farms: Data containing baseline farm information.
      :type baseline_farms: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: air_quality_livestock_future(scenario_animals, scenario_farms)

      Projects future emissions based on scenario data for animals and farm inputs.

      :param scenario_animals: Data containing scenario animal information.
      :type scenario_animals: DataFrame
      :param scenario_farms: Data containing scenario farm input information.
      :type scenario_farms: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: air_quality_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)

      Combine past and future emissions data to provide a comprehensive view of livestock impact on air quality.

      :param baseline_animals: Data containing baseline animal information.
      :type baseline_animals: DataFrame
      :param scenario_animals: Data containing scenario animal information.
      :type scenario_animals: DataFrame
      :param baseline_farms: Data containing baseline farm input information.
      :type baseline_farms: DataFrame
      :param scenario_farms: Data containing scenario farm input information.
      :type scenario_farms: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: ClimateChangeCrop(ef_country, default_urea=None, default_urea_abated=None, AR_VALUE='AR5')


   A class for assessing the impact of crops on climate change. It calculates emissions
   from crops for both past and future scenarios, considering various emission categories.

   .. attribute:: ef_country

      emission factor country.

      :type: str

   .. attribute:: crop_climate_change_class

      A class for calculating emissions for each category.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. attribute:: default_urea_proportion

      The proportion of fertiliser inputs that is urea.

      :type: float

   .. attribute:: default_urea_abated_porpotion

      The proportion of urea that is abated urea.

      :type: float

   .. method:: climate_change_crop_past(crop_dataframe)

      
      Calculates past emissions based on baseline data for animals and farm inputs.

   .. method:: climate_change_crop_future(crop_dataframe, scenario_dataframe)

      
      Projects future emissions based on scenario data for animals and farm inputs.

   .. method:: climate_change_crops_dissagregated(crop_dataframe, scenario_dataframe)

      
      Provides detailed emissions data combining past and future scenarios.

   .. method:: climate_change_crops_categories_as_co2e(crop_dataframe, scenario_dataframe)

      
      Provides emissions data combining past and future scenarios, converted to CO2 equivalents.
      
      

   .. py:method:: climate_change_crop_past(crop_dataframe)

      Calculates past emissions based on baseline data for animals and farm inputs.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: climate_change_crop_future(crop_dataframe, scenario_dataframe)

      Projects future emissions based on scenario data for animals and farm inputs.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: climate_change_crops_dissagregated(crop_dataframe, scenario_dataframe)

      Combine past and future emissions data to provide a comprehensive view of crop impact on climate change.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame


   .. py:method:: climate_change_crops_categories_as_co2e(crop_dataframe, scenario_dataframe)

      Combine past and future emissions data to provide a comprehensive view of crop impact on climate change,
      converted to CO2 equivalents.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame


   .. py:method:: climate_change_crops_aggregated(crop_dataframe, scenario_dataframe)

      Combine past and future emissions data to provide a comprehensive view of crop impact on climate change
      for various GHG categories.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: EurtrophicationCrop(ef_country, default_urea=None, default_urea_abated=None)


   A class for assessing the impact of crops on eutrophication. It calculates emissions
   from crops for both past and future scenarios, considering various emission categories.

   .. attribute:: ef_country

      emission factor country.

      :type: str

   .. attribute:: crop_eutrophication_class

      A class for calculating emissions for each category.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. attribute:: default_urea_proportion

      The proportion of fertiliser inputs that is urea.

      :type: float

   .. attribute:: default_urea_abated_porpotion

      The proportion of urea that is abated urea.

      :type: float

   .. method:: eutrophication_crop_past(crop_dataframe)

      
      Calculates past emissions based on baseline data for animals and farm inputs.

   .. method:: eutrophication_crop_future(crop_dataframe, scenario_dataframe)

      
      Projects future emissions based on scenario data for animals and farm inputs.

   .. method:: eutrophication_crops_dissagregated(crop_dataframe, scenario_dataframe)

      
      Provides detailed emissions data combining past and future scenarios.
      
      

   .. py:method:: eutrophication_crops_past(crop_dataframe)

      Calculates past emissions based on baseline data for animals and farm inputs.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: eutrophication_crops_future(crop_dataframe, scenario_dataframe)

      Projects future emissions based on scenario data for animals and farm inputs.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: eutrophication_crops_dissagregated(crop_dataframe, scenario_dataframe)

      Combine past and future emissions data to provide a comprehensive view of crop impact on eutrophication.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: AirQualityCrop(ef_country, default_urea=None, default_urea_abated=None)


   A class for assessing the impact of crops on air quality. It calculates emissions
   from crops for both past and future scenarios, considering various emission categories.

   .. attribute:: ef_country

      emission factor country.

      :type: str

   .. attribute:: crop_air_quality_class

      A class for calculating emissions for each category.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. attribute:: default_urea_proportion

      The proportion of fertiliser inputs that is urea.

      :type: float

   .. attribute:: default_urea_abated_porpotion

      The proportion of urea that is abated urea.

      :type: float

   .. method:: air_quality_crop_past(crop_dataframe)

      
      Calculates past emissions based on baseline data for animals and farm inputs.

   .. method:: air_quality_crop_future(crop_dataframe, scenario_dataframe)

      
      Projects future emissions based on scenario data for animals and farm inputs.

   .. method:: air_quality_crops_dissagregated(crop_dataframe, scenario_dataframe)

      
      Provides detailed emissions data combining past and future scenarios.
      
      

   .. py:method:: air_quality_crops_past(crop_dataframe)

      Calculates past emissions based on baseline data for animals and farm inputs.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: air_quality_crops_future(crop_dataframe, scenario_dataframe)

      Projects future emissions based on scenario data for animals and farm inputs.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A dictionary of emissions data categorized by emission type.
      :rtype: dict


   .. py:method:: air_quality_crops_dissagregated(crop_dataframe, scenario_dataframe)

      Combine past and future emissions data to provide a comprehensive view of crop impact on air quality.

      :param crop_dataframe: Data containing baseline crop information.
      :type crop_dataframe: DataFrame
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame

      :returns: A combined dataframe of past and future emissions data.
      :rtype: DataFrame



.. py:class:: ClimateChangeTotal


   A class for assessing the total impact of land use change, livestock and crops on climate change. It calculates emissions
   from land use change, livestock and crops for both past and future scenarios, considering various emission categories.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. method:: total_climate_change_emissions(calibration_year, target_year, scenario_dataframe, dataframe_dict)

      
      Calculates total emissions for each scenario.
      
      

   .. py:method:: total_climate_change_emissions(calibration_year, target_year, scenario_dataframe, dataframe_dict)

      Calculates climate change total emissions for each scenario.

      :param calibration_year: The year for which calibration data is available.
      :type calibration_year: int
      :param target_year: The year for which scenario ends.
      :type target_year: int
      :param scenario_dataframe: Data containing scenario information.
      :type scenario_dataframe: DataFrame
      :param dataframe_dict: A dictionary of dataframes containing baseline and scenario information.
      :type dataframe_dict: dict

      :returns: A dataframe of total emissions for each scenario.
      :rtype: DataFrame



.. py:class:: EutrophicationTotal


   A class for assessing the total impact of livestock and crops on eutrophication. It calculates emissions
   from livestock and crops for both past and future scenarios, considering various emission categories.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. method:: total_eutrophication_emissions(dataframe_dict)

      
      Calculates total emissions for each scenario.
      
      

   .. py:method:: total_eutrophication_emissions(dataframe_dict)

      Calculates eutrophication total emissions for each scenario.

      :param dataframe_dict: A dictionary of dataframes containing baseline and scenario information.
      :type dataframe_dict: dict

      :returns: A dataframe of total emissions for each scenario.
      :rtype: DataFrame



.. py:class:: AirQualityTotal


   A class for assessing the total impact of livestock and crops on air quality. It calculates emissions
   from livestock and crops for both past and future scenarios, considering various emission categories.

   .. attribute:: common_class

      A class for managing various data and constants.

      :type: CommonParams

   .. method:: total_air_quality_emissions(dataframe_dict)

      
      Calculates total emissions for each scenario.
      
      

   .. py:method:: total_air_quality_emissions(dataframe_dict)

      Calculates air quality total emissions for each scenario.

      :param dataframe_dict: A dictionary of dataframes containing baseline and scenario information.
      :type dataframe_dict: dict

      :returns: A dataframe of total emissions for each scenario.
      :rtype: DataFrame



