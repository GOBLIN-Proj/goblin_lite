:py:mod:`goblin_lite.goblin`
============================

.. py:module:: goblin_lite.goblin

.. autoapi-nested-parse::

   Goblin module
   ==============

   The Goblin Lite module is designed for running environmental impact scenarios, focusing on agricultural practices and land use.
   It is intended to be used in the context of environmental impact assessments, and it generates a series of data tables representing
   various aspects of environmental impact under different agricultural and land use scenarios.

   These tables are stored and can be accessed for further analysis and visualization.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_lite.goblin.ScenarioRunner




.. py:class:: ScenarioRunner(ef_country, calibration_year, target_year, config_path, cbm_config_path, AR_VALUE='AR5')


   The ScenarioRunner class is responsible for orchestrating the entire scenario generation process in the context
   of environmental impact assessments, focusing on agricultural practices and land use scenarios.

   .. attribute:: ef_country

      The country for which the scenario is being run.

      :type: str

   .. attribute:: calibration_year

      The year for calibration data.

      :type: int

   .. attribute:: target_year

      The target year for which the scenario is generated.

      :type: int

   .. attribute:: config_path

      The path to the scenario configuration file.

      :type: str

   .. attribute:: cbm_config_path

      The path to the CBM CFS3 configuration file.

      :type: str

   .. attribute:: AR_VALUE

      The Assessment Report value. Default is "AR5".

      :type: str, optional

   .. attribute:: data_manager_class

      An instance of the DataManager class for managing data storage.

      :type: DataManager

   .. method:: run_scenarios()

      Orchestrates the scenario generation process, encompassing data preparation, analysis, and storage.
      It generates a series of data tables representing various aspects of environmental impact under different
      agricultural and land use scenarios. These tables are stored and can be accessed for further analysis
      and visualization.


   .. py:method:: run_scenarios()

      Executes the scenario generation process using provided inputs and configurations.

      This method manages the complete scenario generation process. It prepares and generates data for various scenarios
      and the selected baseline across multiple domains (such as animal data, land use, crop data, carbon flux, etc.),
      encapsulated in 26 distinct data tables. These tables are saved as pandas dataframes and are intended for subsequent
      analysis and visualization.



