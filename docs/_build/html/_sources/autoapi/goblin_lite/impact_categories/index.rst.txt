:py:mod:`goblin_lite.impact_categories`
=======================================

.. py:module:: goblin_lite.impact_categories


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   goblin_lite.impact_categories.CommonParams
   goblin_lite.impact_categories.ClimateChangeLandUse
   goblin_lite.impact_categories.ClimateChangeLivestock
   goblin_lite.impact_categories.EutrophicationLivestock
   goblin_lite.impact_categories.AirQualityLivestock
   goblin_lite.impact_categories.ClimateChangeCrop
   goblin_lite.impact_categories.EurtrophicationCrop
   goblin_lite.impact_categories.AirQualityCrop
   goblin_lite.impact_categories.ClimateChangeTotal
   goblin_lite.impact_categories.EutrophicationTotal
   goblin_lite.impact_categories.AirQualityTotal




.. py:class:: CommonParams



.. py:class:: ClimateChangeLandUse(calibration_year, target_year, transition_data, landuse_data, forest_data, ef_country, AR_VALUE='AR5')


   .. py:method:: climate_change_landuse_past()


   .. py:method:: climate_change_landuse_future()


   .. py:method:: climate_change_landuse()



.. py:class:: ClimateChangeLivestock(ef_country, AR_VALUE='AR5')


   .. py:method:: climate_change_livestock_past(baseline_animals, baseline_farms)


   .. py:method:: climate_change_livestock_future(scenario_animals, scenario_farms)


   .. py:method:: climate_change_livestock_dissagregated(basline_animals, scenario_animals, baseline_farms, scenario_farms)


   .. py:method:: climate_change_livestock_aggregated(basline_animals, scenario_animals, baseline_farms, scenario_farms)


   .. py:method:: climate_change_livestock_categories_as_co2e(basline_animals, scenario_animals, baseline_farms, scenario_farms)



.. py:class:: EutrophicationLivestock(ef_country)


   .. py:method:: eutrophication_livestock_past(baseline_animals, baseline_farms)


   .. py:method:: eutrophication_livestock_future(scenario_animals, scenario_farms)


   .. py:method:: eutrophication_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)



.. py:class:: AirQualityLivestock(ef_country)


   .. py:method:: air_quality_livestock_past(baseline_animals, baseline_farms)


   .. py:method:: air_quality_livestock_future(scenario_animals, scenario_farms)


   .. py:method:: air_quality_livestock_dissagregated(baseline_animals, scenario_animals, baseline_farms, scenario_farms)



.. py:class:: ClimateChangeCrop(ef_country, default_urea=None, default_urea_abated=None, AR_VALUE='AR5')


   .. py:method:: climate_change_crop_past(crop_dataframe)


   .. py:method:: climate_change_crop_future(crop_dataframe, scenario_dataframe)


   .. py:method:: climate_change_crops_dissagregated(crop_dataframe, scenario_dataframe)


   .. py:method:: climate_change_crops_categories_as_co2e(crop_dataframe, scenario_dataframe)


   .. py:method:: climate_change_crops_aggregated(crop_dataframe, scenario_dataframe)



.. py:class:: EurtrophicationCrop(ef_country, default_urea=None, default_urea_abated=None)


   .. py:method:: eutrophication_crops_past(crop_dataframe)


   .. py:method:: eutrophication_crops_future(crop_dataframe, scenario_dataframe)


   .. py:method:: eutrophication_crops_dissagregated(crop_dataframe, scenario_dataframe)



.. py:class:: AirQualityCrop(ef_country, default_urea=None, default_urea_abated=None)


   .. py:method:: air_quality_crops_past(crop_dataframe)


   .. py:method:: air_quality_crops_future(crop_dataframe, scenario_dataframe)


   .. py:method:: air_quality_crops_dissagregated(crop_dataframe, scenario_dataframe)



.. py:class:: ClimateChangeTotal


   .. py:method:: total_climate_change_emissions(calibration_year, target_year, scenario_dataframe, dataframe_dict)



.. py:class:: EutrophicationTotal


   .. py:method:: total_eutrophication_emissions(scenario_dataframe, dataframe_dict)



.. py:class:: AirQualityTotal


   .. py:method:: total_air_quality_emissions(scenario_dataframe, dataframe_dict)



